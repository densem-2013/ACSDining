//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Threading.Tasks;
using ACSDining.Core.DataContext;
using ACSDining.Core.Domains;
using ACSDining.Core.Infrastructure;
using ACSDining.Infrastructure.DAL;

namespace ACSDining.Infrastructure.Identity
{
    using Microsoft.AspNet.Identity.EntityFramework;
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.ModelConfiguration.Conventions;
    using System.Globalization;
    using System.Collections.Generic;
    using ACSDining.Core.Domains;

    public partial class ApplicationDbContext : IdentityDbContext<User>, IDataContextAsync
    { 
        #region Private Fields
        private readonly Guid _instanceId;
        bool _disposed;
        #endregion Private Fields
        //private static readonly Lazy<ApplicationDbContext> lazy =
        //new Lazy<ApplicationDbContext>(() => new ApplicationDbContext());

        public Guid InstanceId { get { return _instanceId; } }

        public ApplicationDbContext()
            : base("name=ApplicationDbContext", throwIfV1Schema: false)
        {
            _instanceId = Guid.NewGuid();
            Configuration.LazyLoadingEnabled = false;
            Configuration.ProxyCreationEnabled = false;
        }

        static ApplicationDbContext()
        {
            Database.SetInitializer<ApplicationDbContext>(new ApplicationDbInitializer());
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            modelBuilder.Entity<MenuForDay>()
                .HasMany(mfd => mfd.Dishes).WithMany(m => m.MenusForDay)
                .Map(t => t.MapLeftKey("MenuID")
                    .MapRightKey("DishID")
                    .ToTable("MFD_Dishes"));




            base.OnModelCreating(modelBuilder);
        }

        public static ApplicationDbContext Create()
        {
             return new ApplicationDbContext();
            //return lazy.Value;
        }

        public virtual DbSet<Dish> Dishes { get; set; }
        public virtual DbSet<DishType> DishTypes { get; set; }
        public virtual DbSet<MenuForDay> MenuForDays { get; set; }
        public virtual DbSet<MenuForWeek> MenuForWeeks { get; set; }
        public virtual DbSet<OrderMenu> OrderMenus { get; set; }
        public virtual DbSet<PlannedOrderMenu> PlannedOrderMenus { get; set; }
        public virtual DbSet<DishQuantity> DishQuantities { get; set; }
        public virtual DbSet<DishDetail> DishDetails { get; set; }
        public virtual DbSet<ACSDining.Core.Domains.DayOfWeek> Days { get; set; }
        public virtual DbSet<Year> Years { get; set; }
        public virtual DbSet<DishQuantityRelations> DQRelations { get; set; }
        public virtual DbSet<FoodQuantityRelations> FQRelations { get; set; }
        public virtual DbSet<Food> Foods { get; set; }
        public virtual DbSet<FoodCategory> FoodCategories { get; set; }
        public virtual DbSet<FoodQuantity> FoodQuantities { get; set; }
        public virtual DbSet<WorkingWeek> WorkingWeeks { get; set; }
        public virtual DbSet<WorkingDay> WorkingDays { get; set; }
        //public virtual DbSet<UserRoleRelation>  UserRoleRelations { get; set; }
        //public override DbSet<User> Users { get; set; }
        //public new DbSet<UserRole> Roles { get; set; }

        public override int SaveChanges()
        {
            SyncObjectsStatePreCommit();
            var changes = base.SaveChanges();
            SyncObjectsStatePostCommit();
            return changes;
        }
        public override async Task<int> SaveChangesAsync()
        {
            return await this.SaveChangesAsync(CancellationToken.None);
        }
        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            SyncObjectsStatePreCommit();
            var changesAsync = await base.SaveChangesAsync(cancellationToken);
            SyncObjectsStatePostCommit();
            return changesAsync;
        }

        public void SyncObjectState<TEntity>(TEntity entity) where TEntity : class, IObjectState
        {
            Entry(entity).State = StateHelper.ConvertState(entity.ObjectState);
        }

        private void SyncObjectsStatePreCommit()
        {
            foreach (var dbEntityEntry in ChangeTracker.Entries())
            {
                dbEntityEntry.State = StateHelper.ConvertState(((IObjectState)dbEntityEntry.Entity).ObjectState);
            }
        }

        public void SyncObjectsStatePostCommit()
        {
            foreach (var dbEntityEntry in ChangeTracker.Entries())
            {
                ((IObjectState)dbEntityEntry.Entity).ObjectState = StateHelper.ConvertState(dbEntityEntry.State);
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {
                    // free other managed objects that implement
                    // IDisposable only
                }

                // release any unmanaged objects
                // set object references to null

                _disposed = true;
            }

            base.Dispose(disposing);
        }
    }
}
